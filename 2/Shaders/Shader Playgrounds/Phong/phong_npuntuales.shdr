{
  "vertexSource": "#version 300 es\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 normalMatrix;\nuniform mat4 modelMatrix;\n\nuniform int len;\nuniform vec3 ppuntual[128];\n//uniform vec3 pspot;\n//uniform vec3 ddireccional;\n\nin vec3 vertexNormal;\nin vec3 vertexPosition;\nout vec3 normal;\nout vec3 Lpuntual[128];\nout vec3 ojo;\n//out vec3 Lspot;\n//out vec3 LEspot;\n//out vec3 ddir;\n\nvoid main() {\n    vec3 vPE = vec3(viewMatrix * modelMatrix * vec4(vertexPosition, 1));\n    vec3 LE;\n    for ( int i = 0; i < len; i++ ) {\n    \tLE = vec3(viewMatrix * vec4(ppuntual[i],1));\n        Lpuntual[i] = normalize(vec3(LE-vPE));\n    }\n   // ddir = normalize( vec3( viewMatrix * vec4(ddireccional,0)   )  );\n    normal = normalize(vec3(normalMatrix*vec4(vertexNormal,1)));\n    ojo = normalize(-vPE);  // distancia entre la posicion del ojo (0,0,0) y un vertice del objeto\n    \n   \n   // LEspot = vec3(viewMatrix * vec4(pspot,1));\n   // Lspot = normalize( pspot - vec3(modelMatrix * vec4(vertexPosition, 1)) );\n  //  LEspot = normalize(vec3(LEspot-vPE));\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vertexPosition, 1);\n}",
  "fragmentSource": "#version 300 es\nprecision mediump float;\n\nuniform vec3 ia;\n\nuniform vec3 ka;\nuniform vec3 kd;\nuniform vec3 ks;\nuniform float n;\n\nuniform int len;\nuniform vec3 ipuntual[128];\nuniform vec3 fapuntual[128];\n/*\nuniform vec3 dspot;\nuniform vec3 ispot;\nuniform float angulo;\nuniform vec3 faspot;\n\nuniform vec3 idireccional;\n\nin vec3 Lspot;\nin vec3 LEspot;\nin vec3 ddir;\n*/\n\nin vec3 normal;\nin vec3 Lpuntual[128];\nin vec3 ojo;\nout vec4 fragmentColor;\n\nvoid main() {\n    float FP = 1.0/float(len);\n    vec3 N = normalize(normal);\n    vec3 V = normalize(ojo);\n    vec3 L, H, luzpuntual[128], color = ia*ka;\n    float NL, NHn, d, fa;\n    for ( int i = 0; i < len; i++ ) {\n        L = normalize(Lpuntual[i]);\n        H = normalize(L+V);\n        NL = max(dot(N,L),0.0); // intensidad de luz difusa\n        NHn = pow(max(dot(N,H),0.0),n);// intensidad de luz especular\n        d = sqrt(L.x*L.x + L.y*L.y + L.z*L.z  );\n        fa = 1.0/(1.0+fapuntual[i].x+fapuntual[i].y*d+fapuntual[i].z*d*d);\n        color += FP*fa*ipuntual[i]*(kd*NL + ks*NHn);\n    }\n/*\n    vec3 Ldir = normalize(-ddir);\n    NL = max(dot(N,Ldir),0.0);\n    vec3 luzdireccional = vec3(0,0,0);\n    H = normalize(Ldir+V);\n    NHn  = pow(max(dot(N,H),0.0),n);\n    luzdireccional =  idireccional*( kd*NL + ks*NHn  );   \n\n\n    vec3 Dspot = normalize(-dspot);\n    vec3 vL = normalize(Lspot);\n    L = normalize(LEspot);   \n    H = normalize(L+V);\n    NL = max(dot(N,L),0.0);\n    NHn  = pow(max(dot(N,H),0.0),n);\n    vec3 luzspot = vec3(0,0,0);\n    if ( angulo == 0.0 || dot(vL,Dspot) > angulo ) {\n        d = sqrt(L.x*L.x + L.y*L.y + L.z*L.z  );\n        fa = 1.0/(1.0+faspot.x+faspot.y*d+faspot.z*d*d);\n        luzspot += fa*ispot*(kd*NL+ks*NHn);\n    }\n*/\n\n    fragmentColor = vec4( color ,1);\n\n}",
  "model": "cube",
  "uniforms": [],
  "textureUnits": [
    "blank",
    "blank",
    "blank",
    "blank",
    "blank",
    "blank",
    "blank"
  ]
}