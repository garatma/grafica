{
  "vertexSource": "#version 300 es\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 normalMatrix;\nuniform mat4 modelMatrix;\n\nuniform vec3 posL;// posicion de la luz en coordenadas del mundo\n\nin vec3 vertexNormal;\nin vec3 vertexPosition;\nout vec3 normal;\nout vec3 luz;\nout vec3 ojo;\nout vec3 vL;\n\n\nvoid main() {\n    vec3 vPE = vec3(viewMatrix * modelMatrix * vec4(vertexPosition, 1)); // vector  posicion de vertice del objeto en coordenadas del ojo\n    vec3 LE = vec3(viewMatrix * vec4(posL,1)); // vector posicion de la luz en coordenadas del ojo\n\tvL = normalize( posL - vec3(modelMatrix * vec4(vertexPosition, 1))  ); // vector pos luz em coordenadas del mundo\n    luz = normalize(vec3(LE-vPE));\n    normal = normalize(vec3(normalMatrix*vec4(vertexNormal,1)));\n    ojo = normalize(-vPE);  //vector entre distancia entre la posicion del ojo (0,0,0) y un vertice del objeto\n   \n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vertexPosition, 1);\n}",
  "fragmentSource": "#version 300 es\n#define PI 3.14159265\nprecision mediump float;\n\nuniform float rho; // ro entre[0,1]\nuniform float sigma; //sigma entre [0,90]\n\nuniform vec4 luz_direccional;\n\nin vec3 normal;\nin vec3 luz;\nin vec3 ojo;\nin vec3 vL;\n\nout vec4 fragmentColor;\n\nvoid main() {\nvec3 Nn = normalize(normal);\nvec3 Ln = normalize(luz);\nvec3 Vn = normalize(ojo);\nvec3 vl = normalize(vL);    \nvec3 nDL = normalize(luz_direccional.xyz);\n//Calculo L (cos(thetai) al cuadrado) \nfloat L = max(0.0,dot(Nn,Ln));\n//Calculo L (cos2(thetar) al cuadrado) \nfloat V = max(0.0,dot(Nn,Vn));\n//Calculo P    \nfloat resP1=dot(normalize(Ln-Nn*L),normalize(Vn -Nn*V));   \nfloat P = max(0.0,resP1);  \n\nfloat sigma2 = sigma*sigma;   \n//Calculo A    \nfloat A = 1.0 -0.5*(sigma2/(sigma2 + 0.33));   \n//Calculo B \nfloat B = 0.45*(sigma2/(sigma2 +0.09));\n//sen(alfa)*tan(beta) con identidades trigonometricas\nfloat C = sqrt((1.0-L*L)*(1.0-V*V))/max(L,V);  \n//pasa al vector color el resultado de la ecuacion\nvec3 color  ;   \nif ( luz_direccional.w == 0.0 || dot(-vl,nDL) > luz_direccional.w )\n    color+= rho/PI*(A+(B*P*C));  \n\nfragmentColor = vec4(color,1);\n       \n}",
  "model": "cube",
  "uniforms": [
    {
      "name": "posL",
      "type": "vec3",
      "value": [
        0,
        0,
        0
      ]
    },
    {
      "name": "rho",
      "type": "float",
      "value": 1
    },
    {
      "name": "sigma",
      "type": "float",
      "value": 80.28
    },
    {
      "name": "luz_direccional",
      "type": "vec4",
      "value": [
        1,
        1,
        1,
        0
      ]
    }
  ]
}