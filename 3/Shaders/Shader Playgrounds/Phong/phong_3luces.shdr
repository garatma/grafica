{
  "vertexSource": "#version 300 es\n\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 normalMatrix;\nuniform mat4 modelMatrix;\n\nuniform vec3 ppuntual;\nuniform vec3 pspot;\nuniform vec3 ddireccional;\n\nin vec3 vertexNormal;\nin vec3 vertexPosition;\nin vec2 vertexTextureCoordinates;\n\nout vec3 normal;\nout vec3 Lpuntual;\nout vec3 ojo;\nout vec3 Lspot;\nout vec3 LEspot;\nout vec3 ddir;\nout vec2 ftextCoord;\nout mat3 matrixTBN;\nout vec3 vPE;\n\nvoid main() {\n    vec3 tangent = normalize(vec3(normalMatrix*vec4(0,1,0,0)));\n    vec3 bitangent ;\n    vec3 vPE = vec3(viewMatrix * modelMatrix * vec4(vertexPosition, 1));\n    vec3 LE = vec3(viewMatrix * vec4(ppuntual,1));\n    ddir = normalize( vec3( viewMatrix * vec4(ddireccional,0)));\n    Lpuntual = normalize(vec3(LE-vPE));\n    normal = normalize(vec3(normalMatrix*vec4(vertexNormal,0)));\n    tangent  = cross(normal,tangent);\n    bitangent = cross(normal,tangent);\n    matrixTBN = mat3(tangent,bitangent,normal);\n    ojo = normalize(-vPE);  // distancia entre la posicion del ojo (0,0,0) y un vertice del objeto\n    ftextCoord = vertexTextureCoordinates;\n   \n    LEspot = vec3(viewMatrix * vec4(pspot,1));\n    Lspot = normalize( pspot - vec3(modelMatrix * vec4(vertexPosition, 1)) );\n    LEspot = normalize(vec3(LEspot-vPE));\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vertexPosition, 1);\n}",
  "fragmentSource": "#version 300 es\nprecision mediump float;\n\nuniform mat4 viewMatrix;\n\nuniform vec3 ia;\nuniform float n;\nuniform vec3 ipuntual;\nuniform vec3 fapuntual;\n\nuniform vec3 dspot;\nuniform vec3 ispot;\nuniform float angulo;\nuniform vec3 faspot;\nuniform vec3 idireccional;\nuniform sampler2D imagen;\nuniform sampler2D normalmap;\n\nin vec2 ftextCoord;\nin vec3 Lspot;\nin vec3 LEspot;\nin vec3 normal;\nin vec3 Lpuntual;\nin vec3 ojo;\nin vec3 ddir;\nin mat3 matrixTBN;\nin vec3 vPE;\n\nout vec4 fragmentColor;\n\nvoid main() {\n    \n    vec3 texturaColor = vec3(texture(imagen, ftextCoord));\n    vec3 texturaMap = vec3(texture(normalmap, ftextCoord));\n    \n    vec3 Normal = matrixTBN *( texturaMap*2.0 -1.0 );   // para pasar de 0,1 a -1,1\n\n     vec3 Ligthpos = normalize(vec3(viewMatrix * vec4(Lpuntual, 1)) - vPE );\n    \n    float FP = 1.0/3.0;\n    vec3 N = normalize(normal);\n    vec3 L = normalize(Lpuntual);\n    vec3 V = normalize(ojo);\n    vec3 H = normalize(L+V);\n    float NL = max(dot(N,L),0.0); // intensidad de luz difusa\n    float NHn = pow(max(dot(N,H),0.0),n);// intensidad de luz especular\n    float d = sqrt(L.x*L.x + L.y*L.y + L.z*L.z  );\n    float fa = 1.0/(1.0+fapuntual.x+fapuntual.y*d+fapuntual.z*d*d);\n    vec3 luzpuntual = fa*ipuntual*(NL + NHn);\n\n    vec3 Ldir = normalize(-ddir);\n    NL = max(dot(N,Ldir),0.0);\n    vec3 luzdireccional = vec3(0,0,0);\n    H = normalize(Ldir+V);\n    NHn  = pow(max(dot(N,H),0.0),n);\n    luzdireccional =  idireccional*( NL + NHn  );   \n\n\n    vec3 Dspot = normalize(-dspot);\n    vec3 vL = normalize(Lspot);\n    L = normalize(LEspot);   \n    H = normalize(L+V);\n    NL = max(dot(N,L),0.0);\n    NHn  = pow(max(dot(N,H),0.0),n);\n    vec3 luzspot = vec3(0,0,0);\n    if ( angulo == 0.0 || dot(vL,Dspot) > angulo ) {\n        d = sqrt(L.x*L.x + L.y*L.y + L.z*L.z  );\n        fa = 1.0/(1.0+faspot.x+faspot.y*d+faspot.z*d*d);\n        luzspot += fa*ispot*(NL+NHn);\n    }\n\n    vec3 color =  ia + FP*( luzspot ) ;\n\n    fragmentColor = vec4( color ,1);\n}",
  "model": "sphere",
  "uniforms": [],
  "textureUnits": [
    "earth day",
    "blank",
    "blank",
    "blank",
    "blank",
    "blank",
    "blank"
  ]
}