{
  "vertexSource": "#version 300 es\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 normalMatrix;\nuniform mat4 modelMatrix;\n\nuniform vec3 ppuntual;\nuniform vec3 pspot;\nuniform vec3 ddireccional;\n\nin vec2 vertexTextureCoordinates;\nin vec3 vertexNormal;\nin vec3 vertexPosition;\nout vec3 normal;\nout vec3 Lpuntual;\nout vec3 ojo;\nout vec3 Lspot;\nout vec3 LEspot;\nout vec3 ddir;\nout vec2 coordenadas_texturas;\n\n\nvoid main() {\n    vec3 vPE = vec3(viewMatrix * modelMatrix * vec4(vertexPosition, 1));\n    vec3 LE = vec3(viewMatrix * vec4(ppuntual,1));\n    ddir = normalize( vec3( viewMatrix * vec4(ddireccional,0)   )  );\n    Lpuntual = normalize(vec3(LE-vPE));\n    normal = normalize(vec3(normalMatrix*vec4(vertexNormal,1)));\n    ojo = normalize(-vPE);  // distancia entre la posicion del ojo (0,0,0) y un vertice del objeto\n\n    LEspot = vec3(viewMatrix * vec4(pspot,1));\n    Lspot = normalize( pspot - vec3(modelMatrix * vec4(vertexPosition, 1)) );\n    LEspot = normalize(vec3(LEspot-vPE));\n   // coordenada de textura\n    coordenadas_texturas = vertexTextureCoordinates;\n    \n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vertexPosition, 1);\n}",
  "fragmentSource": "#version 300 es\nprecision mediump float;\nprecision mediump int;\n\nin vec2 coordenadas_texturas;\n\nout vec4 fragmentColor;\n\nuniform float width;\nuniform float height;\n\n//intensidad ambiente\nuniform vec3 ia;\n\n//ambiente,difuso y especular--> Material : plastic\nuniform vec3 ka;\nuniform vec3 kd;\nuniform vec3 ks;\nuniform float n;\n\nuniform vec3 ipuntual;\nuniform vec3 fapuntual;\n\n\nuniform vec3 dspot;\nuniform vec3 ispot;\nuniform float angulo;\nuniform vec3 faspot;\n\nuniform vec3 idireccional;\n\nin vec3 Lspot;\nin vec3 LEspot;\nin vec3 normal;\nin vec3 Lpuntual;\nin vec3 ojo;\nin vec3 ddir;\n\n\nfloat simple_rand(vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec2 rand(vec2 co) {\n    float angle = 3.141592654 * 2.0 * simple_rand(co);\n    return vec2(sin(angle), cos(angle));\n}\n\n// mix function as described in the slides\nfloat lerp(float x, float y, float alpha) {\n    return (1.0 - alpha) * x + alpha * y;\n}\n\n// interpolation function as described in the slides\nfloat f(float t) {\n    return t*t*t * (t * (6.0*t - 15.0) + 10.0);\n}\n\nvec3 noise(vec2 vec) {\n    // number of pixels per cell\n    float cell_px =5.0;\n\n    // get coordinates of current cell corners and calculate random gradients\n    // GRID coordinates\n    float cx = float(floor(vec.x * width )/ cell_px);\n    float cy = float(floor(vec.y * height / cell_px));\n    // ABSOLUTE coordinates\n    vec2 x0y0 = vec2(cx*cell_px, cy*cell_px);\n    vec2 x1y1 = vec2(x0y0.x + cell_px, x0y0.y + cell_px);\n    vec2 x0y1 = vec2(x0y0.x, x1y1.y);\n    vec2 x1y0 = vec2(x1y1.x, x0y0.y);\n\n    // vec translated to inner cell coordinates, relative to x0y0, must be between 0 and 1\n    vec2 cell_vec = vec2(((vec.x * width - x0y0.x) / cell_px), ((vec.y * height - x0y0.y) / cell_px));\n\n    // compute difference vectors\n    vec2 a = vec2(cell_vec);\n    vec2 b = vec2(cell_vec.x, -1.0+cell_vec.y);\n    vec2 c = vec2(-1.0+cell_vec.x, cell_vec.y);\n    vec2 d = vec2(-1.0 + cell_vec.x, 1.0 + cell_vec.y);\n\n    // dot products to get scalar values from the corners\n    float s = dot(rand(x0y0), a);\n    float t = dot(rand(x1y0), b);\n    float u = dot(rand(x0y1), c);\n    float v = dot(rand(x1y1), d);\n\n    float st_ = lerp(s, t, f(cell_vec.x));\n    float uv_ = lerp(u, v, f(cell_vec.x));\n    float noise = lerp(st_, uv_, f(cell_vec.y));\n\n    return vec3(noise);\n}\n\nvoid main() {\n      float FP = 1.0/3.0;\n    vec3 N = normalize(normal);\n    vec3 L = normalize(Lpuntual);\n    vec3 V = normalize(ojo);\n    vec3 H = normalize(L+V);\n    float NL = max(dot(N,L),0.0); // intensidad de luz difusa\n    float NHn = pow(max(dot(N,H),0.0),n);// intensidad de luz especular\n    float d = sqrt(L.x*L.x + L.y*L.y + L.z*L.z  );\n    float fa = 1.0/(1.0+fapuntual.x+fapuntual.y*d+fapuntual.z*d*d);\n    vec3 luzpuntual = fa*ipuntual*(kd*NL + ks*NHn);\n\n\n    vec3 Ldir = normalize(-ddir);\n    NL = max(dot(N,Ldir),0.0);\n    vec3 luzdireccional = vec3(0,0,0);\n    H = normalize(Ldir+V);\n    NHn  = pow(max(dot(N,H),0.0),n);\n    luzdireccional =  idireccional*( kd*NL + ks*NHn  );   \n\n\n    vec3 Dspot = normalize(-dspot);\n    vec3 vL = normalize(Lspot);\n    L = normalize(LEspot);   \n    H = normalize(L+V);\n    NL = max(dot(N,L),0.0);\n    NHn  = pow(max(dot(N,H),0.0),n);\n    vec3 luzspot = vec3(0,0,0);\n    if ( angulo == 0.0 || dot(vL,Dspot) > angulo ) {\n        d = sqrt(L.x*L.x + L.y*L.y + L.z*L.z  );\n        fa = 1.0/(1.0+faspot.x+faspot.y*d+faspot.z*d*d);\n        luzspot += fa*ispot*(kd*NL+ks*NHn);\n    }\n\n    vec3 color =  ia*ka + FP*( luzspot + luzpuntual +luzdireccional) ;\n    color+=noise(coordenadas_texturas);\n    fragmentColor = vec4(color,1.0);\n}",
  "model": "crate",
  "uniforms": [
    {
      "name": "ppuntual",
      "type": "vec3",
      "value": [
        0,
        1,
        0
      ]
    },
    {
      "name": "pspot",
      "type": "vec3",
      "value": [
        0,
        2,
        0
      ]
    },
    {
      "name": "ddireccional",
      "type": "vec3",
      "value": [
        0,
        -1,
        0
      ]
    },
    {
      "name": "width",
      "type": "float",
      "value": 512
    },
    {
      "name": "height",
      "type": "float",
      "value": 512
    },
    {
      "name": "ia",
      "type": "vec3",
      "value": [
        1,
        1,
        1
      ]
    },
    {
      "name": "ka",
      "type": "vec3",
      "value": [
        0.20000000298023224,
        0.20000000298023224,
        0.20000000298023224
      ]
    },
    {
      "name": "kd",
      "type": "vec3",
      "value": [
        0.7099999785423279,
        0.019999999552965164,
        0.10000000149011612
      ]
    },
    {
      "name": "ks",
      "type": "vec3",
      "value": [
        0.20000000298023224,
        0.5,
        0.03999999910593033
      ]
    },
    {
      "name": "n",
      "type": "float",
      "value": 30
    },
    {
      "name": "ipuntual",
      "type": "vec3",
      "value": [
        1,
        1,
        1
      ]
    },
    {
      "name": "fapuntual",
      "type": "vec3",
      "value": [
        0,
        0,
        0
      ]
    },
    {
      "name": "dspot",
      "type": "vec3",
      "value": [
        0,
        -1,
        0
      ]
    },
    {
      "name": "ispot",
      "type": "vec3",
      "value": [
        1,
        1,
        1
      ]
    },
    {
      "name": "angulo",
      "type": "float",
      "value": 0.98
    },
    {
      "name": "faspot",
      "type": "vec3",
      "value": [
        0,
        0,
        0
      ]
    },
    {
      "name": "idireccional",
      "type": "vec3",
      "value": [
        1,
        1,
        1
      ]
    }
  ],
  "textureUnits": [
    "blank",
    "blank",
    "blank",
    "blank",
    "blank",
    "blank",
    "blank"
  ]
}